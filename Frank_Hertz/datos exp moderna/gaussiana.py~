import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# function to model and create data: Two-Gaussian
def func(x, a0, b0, c0, a1, b1, c1):
    return a0 * np.exp(-(x - b0)**2 / (2 * c0**2)) \
           + a1 * np.exp(-(x - b1)**2 / (2 * c1**2))

# clean data
#x = np.linspace(0, 20, 200)
#y = func(x, 1, 3, 1, -2, 15, 0.5)}

#1
#---------------------------------------------------------
#x=[0.285,0.285,0.285,0.285,0.285,0.285,0.39,0.54,0.675,0.825,0.975,1.11,1.26,1.395,1.53,1.68,1.815,1.95,2.085,2.22,2.355,2.505,2.625,2.775,2.91,3.03,3.165,3.285,3.42,3.555,3.69,3.81,3.93,4.065,4.185,4.32,4.455,4.56,4.695,4.815,4.935,5.055,5.19,5.295,5.43,5.535,5.67,5.775,5.895,6.015,6.12,6.24,6.36,6.48,6.6,6.705,6.825,6.93,7.05,7.155,7.26,7.38,7.485,7.59,7.71,7.815,7.92,8.04,8.13,8.25,8.34,8.46,8.565,8.67,8.76,8.865,8.97,9.075,9.18,9.285,9.39,9.48,9.57,9.675,9.765,9.87,9.975,10.065,10.155,10.26,10.365,10.455,10.545,10.635,10.74,10.83,10.92,11.01,11.1,11.19,11.295,11.385,11.46,11.55,11.64,11.745,11.82,11.91,12,12.09,12.18,12.255,12.345,12.435,12.51,12.6,12.69,12.765,12.855,12.93,13.005,13.095,13.185,13.26]

#y=[-0.025,-0.03,-0.025,-0.015,-0.025,-0.02,-0.025,-0.025,-0.02,-0.015,-0.02,-0.015,-0.02,-0.02,-0.015,-0.01,-0.02,-0.02,-0.02,-0.02,-0.025,-0.02,-0.015,-0.015,-0.015,-0.02,-0.02,-0.02,-0.01,-0.01,-0.01,-0.015,-0.005,-0.015,-0.01,-0.005,-0.01,-0.005,-0.005,0,-0.005,0,0.01,0.01,0.01,0.02,0.015,0.025,0.025,0.035,0.035,0.03,0.035,0.03,0.025,0.02,0.02,0.025,0.01,0.015,0.015,0.02,0.015,0.015,0.015,0.015,0.02,0.01,0.02,0.025,0.025,0.03,0.03,0.035,0.035,0.05,0.05,0.06,0.06,0.065,0.075,0.08,0.085,0.095,0.105,0.115,0.125,0.14,0.15,0.16,0.17,0.19,0.21,0.23,0.24,0.26,0.275,0.29,0.295,0.305,0.305,0.295,0.285,0.275,0.265,0.255,0.245,0.225,0.205,0.195,0.18,0.165,0.16,0.15,0.145,0.14,0.135,0.13,0.13,0.135,0.13,0.135,0.14,0.145]
#---------
#x=[13.35,13.425,13.5,13.59,13.665,13.74,13.83,13.905,13.98,14.055,14.13,14.205,14.28,14.355,14.43,14.52,14.58,14.655,14.73,14.805,14.88,14.955,15.03,15.105,15.165,15.24,15.315,15.39,15.465,15.525,15.6,15.675,15.735,15.81,15.885,15.945,16.005,16.08,16.155,16.215,16.275,16.35,16.41,16.47,16.545,16.605,16.665,16.74,16.8,16.86,16.935,16.995,17.07,17.115,17.175,17.25,17.295,17.355,17.43,17.49,17.55,17.61,17.655,17.73,17.79,17.85,17.91,17.955,18.015,18.075,18.135,18.195,18.24,18.3,18.36,18.42,18.48,18.525]

#y=[0.15,0.155,0.165,0.17,0.18,0.185,0.195,0.21,0.225,0.235,0.245,0.255,0.275,0.29,0.305,0.315,0.34,0.355,0.37,0.39,0.41,0.43,0.45,0.475,0.495,0.52,0.545,0.575,0.6,0.63,0.665,0.7,0.735,0.775,0.815,0.845,0.875,0.9,0.915,0.92,0.925,0.935,0.93,0.92,0.905,0.895,0.875,0.865,0.845,0.82,0.8,0.775,0.755,0.725,0.685,0.665,0.635,0.625,0.6,0.58,0.57,0.545,0.52,0.495,0.48,0.455,0.455,0.465,0.465,0.465,0.455,0.435,0.435,0.44,0.455,0.465,0.475,0.495]
#---------
x=[18.585,18.645,18.69,18.75,18.795,18.87,18.9,18.96,19.02,19.065,19.125,19.17,19.23,19.29,19.335,19.38,19.44,19.485,19.545,19.59,19.65,19.695,19.74,19.785,19.845,19.89,19.935,19.98,20.04,20.085,20.13,20.19,20.235,20.28,20.325,20.37,20.415,20.46,20.505,20.565,20.61,20.64,20.685,20.745,20.79,20.82,20.88,20.91,20.955,21,21.06,21.09,21.135,21.18,21.225,21.255,21.3,21.345,21.39,21.435,21.48,21.525,21.57,21.6,21.645,21.675,21.72,21.765,21.81,21.84,21.885,21.93,21.975,22.005,22.05,22.08,22.125,22.155,22.2,22.245,22.275,22.32,22.35,22.395,22.425,22.47,22.515,22.545,22.59,22.62,22.65,22.695,22.725,22.77,22.8,22.83,22.875,22.905,22.95,22.98,23.01,23.055,23.085]

y=[0.51,0.52,0.535,0.555,0.57,0.585,0.61,0.625,0.645,0.67,0.69,0.71,0.74,0.76,0.79,0.805,0.835,0.865,0.89,0.92,0.945,0.975,1,1.03,1.06,1.095,1.135,1.15,1.195,1.225,1.26,1.29,1.325,1.37,1.4,1.435,1.465,1.505,1.53,1.56,1.59,1.61,1.62,1.645,1.66,1.665,1.67,1.68,1.68,1.685,1.685,1.68,1.665,1.67,1.655,1.655,1.64,1.62,1.605,1.58,1.555,1.525,1.505,1.475,1.45,1.425,1.405,1.375,1.35,1.33,1.31,1.29,1.27,1.25,1.225,1.205,1.2,1.165,1.145,1.13,1.105,1.095,1.08,1.07,1.055,1.055,1.04,1.035,1.03,1.03,1.025,1.015,1.015,1.01,1.01,1.015,1.015,1.02,1.02,1.02,1.03,1.04,1.04]
#---------
#x=[23.115,23.16,23.175,23.22,23.25,23.28,23.325,23.355,23.4,23.415,23.445,23.49,23.52,23.55,23.58,23.625,23.655,23.685,23.715,23.745,23.775,23.805,23.835,23.88,23.895,23.94,23.97,24,24.03,24.06,24.09,24.12,24.15,24.195,24.24,24.285,24.33,24.375,24.42,24.45,24.495,24.54,24.585,24.615,24.675,24.705,24.765,24.81,24.84,24.87,24.915,24.96,25.005,25.035,25.08,25.125,25.155,25.185,25.23,25.275,25.305,25.35,25.395,25.425,25.47,25.5,25.545,25.59,25.62,25.665,25.695,25.725,25.755,25.8,25.83,25.875,25.905,25.95,25.98,26.025,26.055,26.085,26.115,26.145,26.19,26.22,26.265,26.295,26.325,26.355,26.4,26.43,26.46,26.49,26.52,26.565,26.595,26.625,26.67,26.685,26.73,26.76,26.79,26.82,26.85,26.88,26.925,26.94,26.985,27]

#y=[1.055,1.065,1.065,1.075,1.095,1.105,1.115,1.125,1.145,1.15,1.17,1.18,1.2,1.22,1.235,1.26,1.275,1.3,1.315,1.335,1.365,1.385,1.41,1.435,1.455,1.49,1.51,1.535,1.55,1.575,1.605,1.64,1.67,1.705,1.75,1.79,1.84,1.895,1.945,2,2.05,2.1,2.155,2.215,2.27,2.335,2.385,2.445,2.5,2.565,2.62,2.675,2.74,2.79,2.85,2.91,2.955,3.015,3.065,3.115,3.16,3.21,3.24,3.29,3.315,3.355,3.385,3.415,3.44,3.465,3.495,3.505,3.525,3.535,3.55,3.555,3.575,3.575,3.58,3.58,3.58,3.585,3.575,3.565,3.565,3.555,3.535,3.525,3.505,3.485,3.465,3.435,3.42,3.4,3.375,3.345,3.32,3.305,3.28,3.26,3.225,3.21,3.185,3.16,3.125,3.1,3.09,3.05,3.025,2.995]

print (x)
# add noise to data
yn = y + 0.2 * np.random.normal(size=len(x))

# fit noisy data providing guesses
guesses = [1, 3, 1, 1, 15, 1]
popt, pcov = curve_fit(func, x, y)

# print best fit and variances (diagonal elements)
for i in range(0, 6):
    print ("(", popt[i], "+/-", pcov[i,i], ")")

# plot
plt.title('Fitting two Gaussians')
plt.plot(x, y)#, label='Function')
plt.scatter(x, y)
yfit = func(x, popt[0], popt[1], popt[2], popt[3], popt[4], popt[5])
plt.plot(x, yfit)#, '--', label='Best Fit')
plt.legend()
plt.xlabel('x')
plt.ylabel('y = f(x)')
plt.show()

